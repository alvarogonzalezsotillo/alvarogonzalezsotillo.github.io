#+title: Literate Programming y Google Code Jam 2020

#+AUTHOR:      Álvaro González Sotillo
#+EMAIL:       alvarogonzalezsotillo@gmail.com
#+DATE:        2021-03-26
#+URI:         /blog/literate-codejam-2021

#+TAGS: emacs, orgmode, codejam, programación
#+DESCRIPTION: Nueva edición de Codejam con literate programming


#+PROPERTY: header-arg :eval query
#+LANGUAGE: es
#+options: toc:2
#+latex_class_options: [a4paper]
#+latex_header: \usepackage[margin=2cm]{geometry}
#+latex_header: \usepackage{amsmath}
#+latex_header: \usepackage{xcolor}
#+latex_header: \usepackage[spanish]{babel}
#+latex_header: \usepackage{caption}
#+latex_header: \usepackage{listings}
#+latex_header_extra: \lstset{frame=single,columns=fixed,basicstyle=\scriptsize\ttfamily,breaklines=true,postbreak=\raisebox{0ex}[0ex][0ex]{\ensuremath{\color{red}\hookrightarrow\space}},keywordstyle=\color{blue}\ttfamily,stringstyle=\color{red}\ttfamily,commentstyle=\color{green}\ttfamily}
#+latex_header_extra: \lstset{emph={function,let,len,import,translate,module,rotate,module,hull,sphere},emphstyle=\color{blue}\ttfamily}
#+latex_header_extra: \hypersetup{colorlinks,citecolor=black,filecolor=black,linkcolor=black,urlcolor=blue}
#+latex_header_extra: \renewcommand{\lstlistingname}{Listado}
#+latex_header_extra: \captionsetup{font={scriptsize}}


* [[https://code.google.com/codejam/][CodeJam]] utilizando /emacs/
Estos son mis programas para la edición de 2021 de CodeJam. Como en mi anterior participación, están hechos con org-babel


* Prueba

# +INCLUDE: "00-prueba.scala" src scala


* Reverse sort
  https://codingcompetitions.withgoogle.com/codejam/round/000000000043580a/00000000006d0a5c

*** Enunciado
     Note: The main parts of the statements of the problems "Reversort" and "Reversort Engineering" are identical, except for the last paragraph. The problems can otherwise be solved independently.

Reversort is an algorithm to sort a list of distinct integers in increasing order. The algorithm is based on the "Reverse" operation. Each application of this operation reverses the order of some contiguous part of the list.

The pseudocode of the algorithm is the following:

Reversort(L):
  for i := 1 to length(L) - 1
    j := position with the minimum value in L between i and length(L), inclusive
    Reverse(L[i..j])

After i−1
iterations, the positions 1,2,…,i−1 of the list contain the i−1 smallest elements of L, in increasing order. During the i-th iteration, the process reverses the sublist going from the i-th position to the current position of the i-th minimum element. That makes the i-th minimum element end up in the i

-th position.

For example, for a list with 4
elements, the algorithm would perform 3 iterations. Here is how it would process L=[4,2,1,3]

:

    i=1, j=3⟶L=[1,2,4,3]

i=2, j=2⟶L=[1,2,4,3]
i=3, j=4⟶L=[1,2,3,4]

The most expensive part of executing the algorithm on our architecture is the Reverse operation. Therefore, our measure for the cost of each iteration is simply the length of the sublist passed to Reverse, that is, the value j−i+1

. The cost of the whole algorithm is the sum of the costs of each iteration.

In the example above, the iterations cost 3
, 1, and 2, in that order, for a total of 6

.

Given the initial list, compute the cost of executing Reversort on it.


** input
   The first line of the input gives the number of test cases, T. T test cases follow. Each test case consists of 2 lines. The first line contains a single integer N, representing the number of elements in the input list. The second line contains N distinct integers L1, L2, ..., LN, representing the elements of the input list L, in order.

** output
   For each test case, output one line containing Case #x: y, where x is the test case number (starting from 1) and y is the total cost of executing Reversort on the list given as input.

** sample input
#+begin_example
3
4
4 2 1 3
2
1 2
7
7 6 5 4 3 2 1
#+end_example

** sample output
#+begin_example
Case #1: 6
Case #2: 1
Case #3: 12
#+end_example

** code
# +INCLUDE: "01-reverse-sort.scala" src scala
   
  
* Moons and umbrellas

  Problem

Cody-Jamal is working on his latest piece of abstract art: a mural consisting of a row of waning moons and closed umbrellas. Unfortunately, greedy copyright trolls are claiming that waning moons look like an uppercase C and closed umbrellas look like a J, and they have a copyright on CJ and JC. Therefore, for each time CJ appears in the mural, Cody-Jamal must pay X
, and for each time JC appears in the mural, he must pay Y

.

Cody-Jamal is unwilling to let them compromise his art, so he will not change anything already painted. He decided, however, that the empty spaces he still has could be filled strategically, to minimize the copyright expenses.

For example, if CJ?CC? represents the current state of the mural, with C representing a waning moon, J representing a closed umbrella, and ? representing a space that still needs to be painted with either a waning moon or a closed umbrella, he could finish the mural as CJCCCC, CJCCCJ, CJJCCC, or CJJCCJ. The first and third options would require paying X+Y
in copyrights, while the second and fourth would require paying 2⋅X+Y

.

Given the costs X
and Y

and a string representing the current state of the mural, how much does Cody-Jamal need to pay in copyrights if he finishes his mural in a way that minimizes that cost?
Input

The first line of the input gives the number of test cases, T
. T lines follow. Each line contains two integers X and Y and a string S

representing the two costs and the current state of the mural, respectively.
Output

For each test case, output one line containing Case #x
: y, where x is the test case number (starting from 1) and y

is the minimum cost that Cody-Jamal needs to pay in copyrights for a finished mural.
Limits

Time limit: 10 seconds.
Memory limit: 1 GB.
1≤T≤100
.
Each character of S

is either C, J, or ?.
Test Set 1 (Visible Verdict)

1≤
the length of S ≤10.
1≤X≤100.
1≤Y≤100

.
Test Set 2 (Visible Verdict)

1≤
the length of S ≤1000.
1≤X≤100.
1≤Y≤100

.
Extra credit!

What if some copyright holders could pay Cody-Jamal for the advertisement instead of being paid? Cody-Jamal getting paid is represented by a negative cost.
Test Set 3 (Hidden Verdict)

1≤
the length of S ≤1000.
−100≤X≤100.
−100≤Y≤100

.
Sample
Note: there are additional samples that are not run on submissions down below.
Sample Input
save_alt
content_copy

4
2 3 CJ?CC?
4 2 CJCJ
1 3 C?J
2 5 ??J???

Sample Output
save_alt
content_copy

Case #1: 5
Case #2: 10
Case #3: 1
Case #4: 0

Sample Case #1 is the one explained in the problem statement. The minimum cost is X+Y=2+3=5

.

In Sample Case #2, Cody-Jamal is already finished, so he does not have a choice. There are two CJs and one JC in his mural.

In Sample Case #3, substituting either C or J results in one CJ either from the second and third characters or the first and second characters, respectively.

In Sample Case #4, Cody-Jamal can finish his mural with all Js. Since that contains no instance of CJ nor JC, it yields no copyright cost.

Additional Sample - Test Set 3
The following additional sample fits the limits of Test Set 3. It will not be run against your submitted solutions.
Sample Input
save_alt
content_copy

1
2 -5 ??JJ??

Sample Output
save_alt
content_copy

Case #1: -8

In Sample Case #1 for Test Set 3, Cody-Jamal can finish his mural optimally as JCJJCC or JCJJJC. Either way, there is one CJ and two JCs in his mural. 



** code
# +INCLUDE: "02-moons-and-umbrellas.scala" src scala

* Reversort engineering

  Problem

Note: The main parts of the statements of the problems "Reversort" and "Reversort Engineering" are identical, except for the last paragraph. The problems can otherwise be solved independently.

Reversort is an algorithm to sort a list of distinct integers in increasing order. The algorithm is based on the "Reverse" operation. Each application of this operation reverses the order of some contiguous part of the list.

The pseudocode of the algorithm is the following:

Reversort(L):
  for i := 1 to length(L) - 1
    j := position with the minimum value in L between i and length(L), inclusive
    Reverse(L[i..j])

After i−1
iterations, the positions 1,2,…,i−1 of the list contain the i−1 smallest elements of L, in increasing order. During the i-th iteration, the process reverses the sublist going from the i-th position to the current position of the i-th minimum element. That makes the i-th minimum element end up in the i

-th position.

For example, for a list with 4
elements, the algorithm would perform 3 iterations. Here is how it would process L=[4,2,1,3]

:

    i=1, j=3⟶L=[1,2,4,3]

i=2, j=2⟶L=[1,2,4,3]
i=3, j=4⟶L=[1,2,3,4]

The most expensive part of executing the algorithm on our architecture is the Reverse operation. Therefore, our measure for the cost of each iteration is simply the length of the sublist passed to Reverse, that is, the value j−i+1

. The cost of the whole algorithm is the sum of the costs of each iteration.

In the example above, the iterations cost 3
, 1, and 2, in that order, for a total of 6

.

You are given a size N
and a cost C. Find a list of N distinct integers between 1 and N such that the cost of applying Reversort to it is exactly C

, or say that there is no such list.
Input

The first line of the input gives the number of test cases, T
. T lines follow. Each line describes a test case with two integers N and C

, the size of the wanted list and the desired cost, respectively.
Output

For each test case, if there is no list of size N
such that applying Reversort to it costs exactly C, output one line containing Case #x: IMPOSSIBLE, where x is the test case number (starting from 1). Otherwise, output one line containing Case #x: y1 y2 ... yN, where x is the test case number (starting from 1) and each yi is a distinct integer between 1 and N, representing the i

-th element of one such possible list.

If there are multiple solutions, you may output any one of them. (See "What if a test case has multiple correct solutions?" in the Competing section of the FAQ.) This information about multiple solutions will not be explicitly stated in the remainder of the 2021 contest.
Limits

Time limit: 10 seconds.
Memory limit: 1 GB.
1≤T≤100
.
1≤C≤1000

.
Test Set 1 (Visible Verdict)

2≤N≤7

.
Test Set 2 (Visible Verdict)

2≤N≤100

.
Sample
Sample Input
save_alt
content_copy

5
4 6
2 1
7 12
7 2
2 1000

Sample Output
save_alt
content_copy

Case #1: 4 2 1 3
Case #2: 1 2
Case #3: 7 6 5 4 3 2 1
Case #4: IMPOSSIBLE
Case #5: IMPOSSIBLE

Sample Case #1 is described in the statement above.

In Sample Case #2, the algorithm runs for only one iteration on the proposed output. In that iteration, reverse is applied to a sublist of size 1, therefore, its cost is 1.

In Sample Case #3, the first iteration reverses the full list, for a cost of 7. After that, the list is already sorted, but there are 5 more iterations, each of which contributes a cost of 1. Another valid output would be 7 5 4 3 2 1 6. For that output, the first iteration has a cost of 6, the last one has a cost of 2, and all others have a cost of 1.

In Sample Case #4, Reversort will necessarily perform 6 iterations, each of which will have a cost of at least 1, so there is no way the total cost can be as low as required.


** code
# +INCLUDE: "03-reversesort-engineering.scala" src scala
